// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen --source=deps.go --destination=mocks/mock.go
//

// Package mock_item is a generated GoMock package.
package mock_item

import (
	context "context"
	reflect "reflect"

	models "github.com/pvpender/avito-shop/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
	isgomock struct{}
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// GetItemByType mocks base method.
func (m *MockItemRepository) GetItemByType(ctx context.Context, itemType string) (*models.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByType", ctx, itemType)
	ret0, _ := ret[0].(*models.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByType indicates an expected call of GetItemByType.
func (mr *MockItemRepositoryMockRecorder) GetItemByType(ctx, itemType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByType", reflect.TypeOf((*MockItemRepository)(nil).GetItemByType), ctx, itemType)
}
