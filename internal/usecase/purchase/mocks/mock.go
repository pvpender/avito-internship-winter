// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen --source=deps.go --destination=mocks/mock.go
//

// Package mock_purchase is a generated GoMock package.
package mock_purchase

import (
	context "context"
	reflect "reflect"

	models "github.com/pvpender/avito-shop/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockPurchaseRepository is a mock of PurchaseRepository interface.
type MockPurchaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseRepositoryMockRecorder
	isgomock struct{}
}

// MockPurchaseRepositoryMockRecorder is the mock recorder for MockPurchaseRepository.
type MockPurchaseRepositoryMockRecorder struct {
	mock *MockPurchaseRepository
}

// NewMockPurchaseRepository creates a new mock instance.
func NewMockPurchaseRepository(ctrl *gomock.Controller) *MockPurchaseRepository {
	mock := &MockPurchaseRepository{ctrl: ctrl}
	mock.recorder = &MockPurchaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseRepository) EXPECT() *MockPurchaseRepositoryMockRecorder {
	return m.recorder
}

// CreatePurchase mocks base method.
func (m *MockPurchaseRepository) CreatePurchase(ctx context.Context, userId, itemId uint32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchase", ctx, userId, itemId)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePurchase indicates an expected call of CreatePurchase.
func (mr *MockPurchaseRepositoryMockRecorder) CreatePurchase(ctx, userId, itemId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchase", reflect.TypeOf((*MockPurchaseRepository)(nil).CreatePurchase), ctx, userId, itemId)
}

// GetUserPurchases mocks base method.
func (m *MockPurchaseRepository) GetUserPurchases(ctx context.Context, userId uint32) ([]*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPurchases", ctx, userId)
	ret0, _ := ret[0].([]*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPurchases indicates an expected call of GetUserPurchases.
func (mr *MockPurchaseRepositoryMockRecorder) GetUserPurchases(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPurchases", reflect.TypeOf((*MockPurchaseRepository)(nil).GetUserPurchases), ctx, userId)
}

// MockPurchaseUseCase is a mock of PurchaseUseCase interface.
type MockPurchaseUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseUseCaseMockRecorder
	isgomock struct{}
}

// MockPurchaseUseCaseMockRecorder is the mock recorder for MockPurchaseUseCase.
type MockPurchaseUseCaseMockRecorder struct {
	mock *MockPurchaseUseCase
}

// NewMockPurchaseUseCase creates a new mock instance.
func NewMockPurchaseUseCase(ctrl *gomock.Controller) *MockPurchaseUseCase {
	mock := &MockPurchaseUseCase{ctrl: ctrl}
	mock.recorder = &MockPurchaseUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseUseCase) EXPECT() *MockPurchaseUseCaseMockRecorder {
	return m.recorder
}

// CreatePurchase mocks base method.
func (m *MockPurchaseUseCase) CreatePurchase(ctx context.Context, userId uint32, itemType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchase", ctx, userId, itemType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePurchase indicates an expected call of CreatePurchase.
func (mr *MockPurchaseUseCaseMockRecorder) CreatePurchase(ctx, userId, itemType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchase", reflect.TypeOf((*MockPurchaseUseCase)(nil).CreatePurchase), ctx, userId, itemType)
}
